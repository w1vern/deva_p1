x-ai-base: &ai-base
  env_file:
    - .env
  depends_on:
    postgres:
      condition: service_started
    rabbitmq:
      condition: service_healthy
    minio:
      condition: service_healthy
  volumes:
    - ./cache/hugging_face_cache:/root/.cache/huggingface
  networks:
    - app-network

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - app-network

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy

    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD}; /usr/bin/mc mb myminio/${MINIO_BUCKET}; /usr/bin/mc admin user svcacct add \ --access-key ${MINIO_ACCESS_KEY} \ --secret-key ${MINIO_SECRET_KEY} \ myminio ${MINIO_USER}; exit 0; "
    networks:
      - app-network

  backend:
    build:
      context: ./deva_p1_back
    command: bash -c "uvicorn back.main:app --host 0.0.0.0 --port 8000"
    env_file:
      - .env
    depends_on:
      alembic:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - with_back

  frontend:
    build:
      context: ./deva-proj1-front
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./logs:/var/log/nginx/
    ports:
      - 80:80
    restart: always
    depends_on:
      - frontend
    networks:
      - app-network

  ai-transcribe-cpu:
    <<: *ai-base
    build:
      context: ./deva_transcript
      dockerfile: Dockerfile.cpu
    environment:
      - TASK_TYPE=transcribe
    profiles:
      - cpu

  ai-transcribe-nvidia:
    <<: *ai-base
    build:
      context: ./deva_transcript
      dockerfile: Dockerfile.nvidia
    environment:
      - TASK_TYPE=transcribe
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ "gpu" ]
    profiles:
      - nvidia

  ai-summary:
    <<: *ai-base
    build:
      context: ./deva_transcript
      dockerfile: Dockerfile.cpu
    environment:
      - TASK_TYPE=summary

  ai-frames_extractor:
    <<: *ai-base
    build:
      context: ./deva_transcript
      dockerfile: Dockerfile.cpu
    environment:
      - TASK_TYPE=frames_extract

  alembic:
    build:
      context: ./deva_p1_back
    command: alembic upgrade head
    restart: "no"
    env_file:
      - .env
    environment:
      DATABASE_URL: >
        postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_IP}:${DB_PORT}/${DB_NAME}
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:


networks:
  app-network:
    driver: bridge
